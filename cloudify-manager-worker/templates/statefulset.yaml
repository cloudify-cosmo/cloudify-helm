apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "cloudify-manager-worker.name" . }}
  labels:
    name: {{ template "cloudify-manager-worker.name" . }}
{{ include "cloudify-manager-worker.labels" . | indent 4 }}
spec:
  replicas: {{ .Values.config.replicas }}
  selector:
    matchLabels:
      app: {{ template "cloudify-manager-worker.name" . }}
  serviceName: {{ .Values.service.name }}
  {{- if (semverCompare ">=1.25-0" (include "common.capabilities.kubeVersion" .)) }}
  minReadySeconds: {{ .Values.config.minReadySeconds }}
  {{- end }}
  template:
    metadata:
      annotations: {{- toYaml .Values.podAnnotations | nindent 8 }}
      labels:
        app: {{ template "cloudify-manager-worker.name" . }}
        {{- if .Values.config.labels }}
        {{- toYaml .Values.config.labels | nindent 8 }}
        {{- end }}
    spec:
      {{- if .Values.serviceAccount }}
      serviceAccount: {{ .Values.serviceAccount }}
      {{- end }}
      automountServiceAccountToken: false
      securityContext: {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
      - name: prepare-configs
        image: {{ .Values.initContainers.prepareConfigs.repository }}:{{ .Values.initContainers.prepareConfigs.tag }}
        imagePullPolicy: {{ .Values.initContainers.prepareConfigs.pullPolicy }}
        {{- if .Values.initContainers.prepareConfigs.resources }}
        resources: {{- toYaml .Values.initContainers.prepareConfigs.resources | nindent 10 }}
        {{- end }}
        securityContext: {{- toYaml .Values.containerSecurityContext | nindent 10 }}
        env:
        {{- if .Values.db.serverExistingPasswordSecret }}
        - name: POSTGRES_SERVER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.db.serverExistingPasswordSecret }}
              key: postgresql-password
              optional: false
        {{- end }}
        {{- if .Values.db.cloudifyExistingPassword.secret }}
        - name: POSTGRES_CLOUDIFY_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.db.cloudifyExistingPassword.secret }}
              key: {{ .Values.db.cloudifyExistingPassword.key }}
              optional: false
        {{- end }}
        {{- if .Values.queue.existingPasswordSecret }}
        - name: RABBITMQ_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.queue.existingPasswordSecret }}
              key: rabbitmq-password
              optional: false
        {{- end }}
        {{- if .Values.config.security.existingAdminPassword.secret }}
        - name: CFY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.config.security.existingAdminPassword.secret }}
              key: {{ .Values.config.security.existingAdminPassword.key }}
              optional: false
        {{- end }}
        volumeMounts:
          - name: cloudify-cfg-volume
            mountPath: /tmp/cloudify/config.yaml
            subPath: config.yaml
          - name: cloudify-data
            mountPath: /mnt/cloudify-data
        command:
          - /bin/sh
          - -c
          - |
            echo "Copying main config file"
            mkdir -p /mnt/cloudify-data/etc
            cp /tmp/cloudify/config.yaml /mnt/cloudify-data/etc/config.yaml
            replace_placeholder(){
                local PLACEHOLDER="$1"
                local VALUE="$2"
                if test -n "${VALUE}"; then
                  echo "Replacing placeholder ${PLACEHOLDER}"
                  sed -i -e "s|${PLACEHOLDER}|${VALUE}|g" /mnt/cloudify-data/etc/config.yaml
                fi
            }
            replace_placeholder "#{postgresServerPassword}" "${POSTGRES_SERVER_PASSWORD}"
            replace_placeholder "#{postgresCloudifyPassword}" "${POSTGRES_CLOUDIFY_PASSWORD}"
            replace_placeholder "#{rabbitmqPassword}" "${RABBITMQ_PASSWORD}"
            replace_placeholder "#{CfyAdminPassword}" "${CFY_ADMIN_PASSWORD}"
      {{- if .Values.initContainers.waitDependencies.enabled }}
      - name: wait-for-dependencies
        image: {{ .Values.initContainers.waitDependencies.repository }}:{{ .Values.initContainers.waitDependencies.tag }}
        imagePullPolicy: {{ .Values.initContainers.waitDependencies.pullPolicy }}
        {{- if .Values.initContainers.waitDependencies.resources }}
        resources: {{- toYaml .Values.initContainers.waitDependencies.resources | nindent 10 }}
        {{- end }}
        securityContext: {{- toYaml .Values.containerSecurityContext | nindent 10 }}
        env:
        - name: POSTGRES_HOST
          value: {{ .Values.db.host }}
        - name: RABBIT_HOST
          value: {{ .Values.queue.host }}
        command:
          - /bin/sh
          - -c
          - |
            timeout {{ .Values.initContainers.waitDependencies.timeout }} /bin/sh -c '
              wait_for_service(){
                SERVICE="$1:$2"
                until nc -vz $SERVICE > /dev/null; do
                  >&2 echo "$SERVICE is unavailable - sleeping"
                  sleep 2
                done
                >&2 echo "$SERVICE is up"
              }
              wait_for_service ${POSTGRES_HOST} "5432"
              wait_for_service ${RABBIT_HOST} "15671"
            '
        {{- end }}
      containers:
      {{- if .Values.nginx.fastly.enabled }}
      - name: sigsci-agent
        image: {{ include "helper.fastly.image" (dict "fastly" .Values.nginx.fastly) }}
        imagePullPolicy: Always
        env:
        - name: SIGSCI_ACCESSKEYID
          valueFrom:
            secretKeyRef:
              name: sigsci.fusion
              key: accesskeyid
        - name: SIGSCI_SECRETACCESSKEY
          valueFrom:
            secretKeyRef:
              name: sigsci.fusion
              key: secretaccesskey
        # Configure the revproxy listener to listen on a new port 8001
        # forwarding to the app on the original port 8000 as the upstream
        - name: SIGSCI_REVPROXY_LISTENER
          value: {{ include "helper.fastly.revproxy.listener" (dict "fastly" .Values.nginx.fastly) }}
        ports:
          - containerPort: {{ include "helper.fastly.revproxy.port" (dict "fastly" .Values.nginx.fastly) | int }}
            protocol: TCP
        securityContext:
          # The sigsci-agent container should run with its root filesystem read only
          readOnlyRootFilesystem: true
        volumeMounts:
        # Default volume mount location for sigsci-agent writeable data
        # NOTE: Also change `SIGSCI_SHARED_CACHE_DIR` (default `/sigsci/tmp/cache`)
        #       if mountPath is changed, but best not to change.
        - name: sigsci-tmp
          mountPath: /sigsci/tmp
      {{- end }}
      - name: {{ template "cloudify-manager-worker.name" . }}
        image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        {{- if .Values.livenessProbe.enabled }}
        livenessProbe:
          httpGet:
            path: {{ .Values.livenessProbe.httpGet.path }}
            {{- if .Values.config.security.sslEnabled }}
            port: 443
            scheme: HTTPS
            {{- else }}
            port: 80
            scheme: HTTP
            {{- end }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
        {{- end }}
        {{- if .Values.readinessProbe.enabled }}
        readinessProbe:
          httpGet:
            path: {{ .Values.readinessProbe.httpGet.path }}
            {{- if .Values.config.security.sslEnabled }}
            port: 443
            scheme: HTTPS
            {{- else }}
            port: 80
            scheme: HTTP
            {{- end }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
        {{- end }}
        {{- if .Values.startupProbe.enabled }}
        startupProbe:
          httpGet:
            path: {{ .Values.startupProbe.httpGet.path }}
            {{- if .Values.config.security.sslEnabled }}
            port: 443
            scheme: HTTPS
            {{- else }}
            port: 80
            scheme: HTTP
            {{- end }}
          timeoutSeconds: {{ .Values.startupProbe.timeoutSeconds }}
          successThreshold: {{ .Values.startupProbe.successThreshold }}
          periodSeconds: {{ .Values.startupProbe.periodSeconds }}
          failureThreshold: {{ .Values.startupProbe.failureThreshold }}
          initialDelaySeconds: {{ .Values.startupProbe.initialDelaySeconds }}
        {{- end }}
        {{- if .Values.resources }}
        resources: {{- toYaml .Values.resources | nindent 10 }}
        {{- end }}
        securityContext: {{- toYaml .Values.containerSecurityContext | nindent 10 }}
        volumeMounts:
        - mountPath: /run
          name: run
        - mountPath: /run/lock
          name: runlock
        {{- if .Values.license }}
        - name: cloudify-license-volume
          mountPath: /tmp/cloudify/cfy_license.yaml
          subPath: cfy_license.yaml
        {{- else if .Values.licence }}
        - name: cloudify-licence-volume
          mountPath: /tmp/cloudify/cfy_licence.yaml
          subPath: cfy_licence.yaml
        {{- end }}
        - name: supervisord-volume
          mountPath: /etc/supervisord.d/starter.conf
          subPath: starter.conf
        - name: cfy-starter-volume
          mountPath: /tmp/cloudify/cfy_starter.sh
          subPath: cfy_starter.sh
        - name: cfy-log-monitoring-volume
          mountPath: /tmp/cloudify/cfy_log_monitoring.sh
          subPath: cfy_log_monitoring.sh
        - name: before-hook-volume
          mountPath: /tmp/cloudify/before_hook.sh
          subPath: before_hook.sh
        - name: after-hook-volume
          mountPath: /tmp/cloudify/after_hook.sh
          subPath: after_hook.sh
        - name: cloudify-data
          mountPath: /mnt/cloudify-data
        - name: cfy-worker-certs
          mountPath: {{ .Values.config.tlsCertPath }}
          subPath: tls.crt
        - name: cfy-worker-certs
          mountPath: {{ .Values.config.tlsKeyPath }}
          subPath: tls.key
        - name: cfy-worker-certs
          mountPath: {{ .Values.config.caCertPath }}
          subPath: ca.crt
        {{- if .Values.okta.enabled }}
        - name: okta-license-volume
          mountPath: /mnt/cloudify-data/ssl/okta_certificate.pem
          subPath: okta_certificate.pem
        {{- end }}
        - name: stage-user-config-volume
          mountPath: /mnt/cloudify-data/cloudify-stage/userConfig.json
          subPath: userConfig.json
        {{- if .Values.db.useExternalDB }}
        - name: cfy-pgsql-cert
          mountPath: /mnt/cloudify-data/ssl/postgres_ca.crt
          subPath: {{ .Values.tls.pgsqlSslCaName }}
        {{- if ne .Values.tls.pgsqlSslCertName "" }}
        - name: cfy-pgsql-cert
          mountPath: /mnt/cloudify-data/ssl/postgres.crt
          subPath: {{ .Values.tls.pgsqlSslCertName }}
        {{- end }}
        {{- if ne .Values.tls.pgsqlSslKeyName "" }}
        - name: cfy-pgsql-cert
          mountPath: /mnt/cloudify-data/ssl/postgres.key
          subPath: {{ .Values.tls.pgsqlSslKeyName }}
        {{- end }}
        {{- end }}
        {{- if .Values.additionalSecrets }}
        {{- range $index, $secret := .Values.additionalSecrets }}
        {{- range $key, $mount := $secret.mounts }}
        - name: {{ $secret.name }}
          mountPath: {{ $mount.mountPath }}
          subPath: {{ $mount.subPath }}
        {{- end }}
        {{- end }}
        {{- end }}
      volumes:
      - name: run
        emptyDir:
          medium: Memory
          sizeLimit: "2Gi"
      - name: runlock
        emptyDir:
          medium: Memory
          sizeLimit: "2Gi"
      - name: cloudify-cfg-volume
        configMap:
          name: cloudify-config
      {{- if .Values.license.useSecret }}
      - name: cloudify-license-volume
        secret:
          secretName: {{ .Values.license.secretName }}
      {{- else if .Values.license }}
      - name: cloudify-license-volume
        configMap:
          name: {{ .Values.license.secretName }}
      {{- end }}
      {{- if .Values.okta.enabled }}
      - name: okta-license-volume
        secret:
          secretName: {{ .Values.okta.secretName }}
      {{- end }}
      - name: stage-user-config-volume
        configMap:
          name: user-config
      - name: supervisord-volume
        configMap:
          name: supervisord-config
      - name: cfy-starter-volume
        projected:
          defaultMode: 0754
          sources:
          - configMap:
              name: cfy-starter
      - name: cfy-log-monitoring-volume
        projected:
          defaultMode: 0754
          sources:
          - configMap:
              name: cfy-log-monitoring
      - name: before-hook-volume
        projected:
          defaultMode: 0754
          sources:
          - configMap:
              name: before-hook
      - name: after-hook-volume
        projected:
          defaultMode: 0754
          sources:
          - configMap:
              name: after-hook
      - name: cfy-worker-certs
        secret:
          secretName: {{ .Values.tls.secretName }}
      - name: cloudify-data
        persistentVolumeClaim:
          claimName: cfy-worker-pvc
      {{- if .Values.db.useExternalDB }}
      - name: cfy-pgsql-cert
        secret:
          secretName: {{ .Values.tls.pgsqlSslSecretName }}
      {{- end }}
      {{- if .Values.additionalSecrets }}
      {{- range $index, $secret := .Values.additionalSecrets }}
      - name: {{ $secret.name }}
        secret: 
          secretName: {{ $secret.name }}
      {{- end }}
      {{- end }}

    {{- if .Values.nodeSelector }}
      nodeSelector: {{ toYaml .Values.nodeSelector | nindent 8 }}
    {{- end }}
    {{- if .Values.image.pullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.image.pullSecrets | indent 8 }}
      {{- end }}
