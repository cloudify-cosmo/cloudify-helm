apiVersion: v1
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: before-hook
data:
  before_hook.sh: |
    #!/usr/bin/env bash
    set -eux

    function parse_semver() {
      local token="$1"
      local major=0
      local minor=0
      local patch=0
      if egrep '^[0-9]+\.[0-9]+\.[0-9]+' <<<"$token" >/dev/null 2>&1 ; then
        # It has the correct syntax.
        local n=${token//[!0-9]/ }
        local a=(${n//\./ })
              major=${a[0]}
              minor=${a[1]}
              patch=${a[2]}
      fi
      echo "$major $minor $patch"
    }
    WORKER_VERSION_RAW=$(cfy --version | grep "Cloudify CLI" | sed -e 's|^.*Cloudify CLI \([0-9]*\.[0-9]*\.[0-9]*\).*$|\1|g')
    WORKER_VERSION=($(parse_semver "${WORKER_VERSION_RAW}"))

    FILE=/mnt/cloudify-data/init-completed
    CLOUDIFY_DATA_DIR="/mnt/cloudify-data"
    OKTA=/mnt/cloudify-data/ssl/okta_certificate.pem

    mkdir -p /mnt/cloudify-data/manager
    mkdir -p /mnt/cloudify-data/mgmtworker
    mkdir -p /mnt/cloudify-data/latest
    if [ -d "/opt/cloudify-composer" ]; then
      mkdir -p /mnt/cloudify-data/cloudify-composer
    fi

    echo "Creating symbolic link for configs"
    rm -f --verbose /etc/cloudify/config.yaml
    ln -s --verbose "$CLOUDIFY_DATA_DIR/etc/config.yaml" /etc/cloudify/config.yaml
    chown cfyuser "$CLOUDIFY_DATA_DIR/etc/config.yaml"

    if [ -d "/opt/cloudify-stage" ]; then
      mkdir -p /mnt/cloudify-data/cloudify-stage
      rm -f --verbose /opt/cloudify-stage/conf/userConfig.json
      ln -s --verbose "$CLOUDIFY_DATA_DIR/cloudify-stage/userConfig.json" /opt/cloudify-stage/conf/userConfig.json
    fi

    if [ -f "$FILE" ]; then
      echo "The Data exists on PV - creating symbolic links to files and folders on PV"

      if [ -f "$OKTA" ]; then
        mkdir -p /etc/cloudify/ssl
        ln -s --verbose "$OKTA" /etc/cloudify/ssl/okta_certificate.pem
      fi

      echo "Save latest migrations to latest folder, in case we need to apply newest DB schema for version upgrade"
      rm -rf $CLOUDIFY_DATA_DIR/latest/migrations
      cp -a --verbose  /opt/manager/resources/cloudify/migrations $CLOUDIFY_DATA_DIR/latest

      echo "Remove unused directory"
      rm -rf --verbose /opt/manager/resources
      rm -rf --verbose /opt/mgmtworker/env/plugins
      rm -rf --verbose /opt/cloudify-stage/dist/userData

      echo "Remove unused files"
      rm -f --verbose /opt/mgmtworker/work/admin_token
      rm -f --verbose /opt/manager/rest-security.conf
      if [ -d "/opt/cloudify-composer" ]; then
        rm -f --verbose /opt/cloudify-composer/backend/conf/prod.json
        rm -f --verbose /opt/cloudify-composer/backend/conf/db_ca.crt
      fi
      if [ -d "/opt/cloudify-stage" ]; then
        rm -f --verbose /opt/cloudify-stage/conf/db_ca.crt
        rm -f --verbose /opt/cloudify-stage/conf/manager.json
      fi

      echo "Making symbolic links for files"
      ln -s --verbose "$CLOUDIFY_DATA_DIR/mgmtworker/admin_token" /opt/mgmtworker/work/admin_token
      ln -s --verbose "$CLOUDIFY_DATA_DIR/manager/rest-security.conf" /opt/manager/rest-security.conf
      if [ -d "/opt/cloudify-composer" ]; then
        ln -s --verbose "$CLOUDIFY_DATA_DIR/cloudify-composer/prod.json" /opt/cloudify-composer/backend/conf/prod.json
        ln -s --verbose "$CLOUDIFY_DATA_DIR/cloudify-composer/db_ca.crt" /opt/cloudify-composer/backend/conf/db_ca.crt
      fi
      if [ -d "/opt/cloudify-stage" ]; then
        ln -s --verbose "$CLOUDIFY_DATA_DIR/cloudify-stage/db_ca.crt" /opt/cloudify-stage/conf/db_ca.crt
        ln -s --verbose "$CLOUDIFY_DATA_DIR/cloudify-stage/manager.json" /opt/cloudify-stage/conf/manager.json
      fi

      echo "Making symbolic links for directory"
      ln -s --verbose "$CLOUDIFY_DATA_DIR/manager/resources" /opt/manager/resources
      ln -s --verbose "$CLOUDIFY_DATA_DIR/mgmtworker/plugins" /opt/mgmtworker/env/plugins
      if [ -d "/opt/cloudify-stage" ]; then
        ln -s --verbose "$CLOUDIFY_DATA_DIR/cloudify-stage/userData" /opt/cloudify-stage/dist/userData
      fi

      echo "Set proper permissions for stage/composer files"
      if [ -d "/opt/cloudify-composer" ]; then
        chown composer_user /opt/cloudify-composer/backend/conf/prod.json
      fi
      if [ -d "/opt/cloudify-stage" ]; then
        chown stage_user /opt/cloudify-stage/conf/manager.json
      fi

      # Version-specific operations
      case ${WORKER_VERSION[0]} in
      7)
        # Config authorization.conf isn't necessary for CM>=7.x
        ;;
      *)
        rm -f --verbose /opt/manager/authorization.conf
        ln -s --verbose "$CLOUDIFY_DATA_DIR/manager/authorization.conf" /opt/manager/authorization.conf
        ;;
      esac
      
    else
      echo "Copy config"
      if [ -f "$OKTA" ]; then
        mkdir -p /etc/cloudify/ssl
        ln -s --verbose "$OKTA" /etc/cloudify/ssl/okta_certificate.pem
      fi
    fi
