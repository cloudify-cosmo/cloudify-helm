apiVersion: v1
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: after-hook
data:
  after_hook.sh: |
    #!/usr/bin/env bash
    set -eux

    function parse_semver() {
      local token="$1"
      local major=0
      local minor=0
      local patch=0
      if egrep '^[0-9]+\.[0-9]+\.[0-9]+' <<<"$token" >/dev/null 2>&1 ; then
        # It has the correct syntax.
        local n=${token//[!0-9]/ }
        local a=(${n//\./ })
              major=${a[0]}
              minor=${a[1]}
              patch=${a[2]}
      fi
      echo "$major $minor $patch"
    }
    WORKER_VERSION_RAW=$(cfy --version | grep "Cloudify CLI" | sed -e 's|^.*Cloudify CLI \([0-9]*\.[0-9]*\.[0-9]*\).*$|\1|g')
    WORKER_VERSION=($(parse_semver "${WORKER_VERSION_RAW}"))

    FILE=/mnt/cloudify-data/init-completed
    CLOUDIFY_DATA_DIR="/mnt/cloudify-data"

    if [ -f "$FILE" ]; then
      echo "Init flag exists!"

      echo "Update DB schema, if new migrations exist for alembic, which are not executed yet"
      pushd $CLOUDIFY_DATA_DIR/latest/migrations
        CURRENT_DB_BEFORE=$(/opt/manager/env/bin/alembic current)
        echo "CURRENT_DB BEFORE: $CURRENT_DB_BEFORE"
        /opt/manager/env/bin/alembic upgrade head
        CURRENT_DB_AFTER=$(/opt/manager/env/bin/alembic current)
        echo "CURRENT_DB AFTER: $CURRENT_DB_AFTER"
      popd
      rm -rf /opt/manager/resources/cloudify/migrations
      cp -a --verbose $CLOUDIFY_DATA_DIR/latest/migrations $CLOUDIFY_DATA_DIR/manager/resources/cloudify
      
      if [[ "$CURRENT_DB_BEFORE" != "$CURRENT_DB_AFTER" ]] ;then
        echo "Upgrade of DB Schema discovered! Migraitions executed, restart of application will be in place!"
        echo "Restart cloudify manager because of Schema update"
        cfy_manager configure
      fi
    else 
        cfy_manager stop

        echo "Copy necessary files to Persistent Volume"
        cp -a --verbose /opt/mgmtworker/work/admin_token $CLOUDIFY_DATA_DIR/mgmtworker
        cp -a --verbose /opt/manager/rest-security.conf $CLOUDIFY_DATA_DIR/manager
        if [ -d "/opt/cloudify-composer" ]; then
          cp -a --verbose /opt/cloudify-composer/backend/conf/prod.json $CLOUDIFY_DATA_DIR/cloudify-composer
          cp -a --verbose /opt/cloudify-composer/backend/conf/db_ca.crt $CLOUDIFY_DATA_DIR/cloudify-composer
        fi
        if [ -d "/opt/cloudify-stage" ]; then
          cp -a --verbose /opt/cloudify-stage/conf/db_ca.crt $CLOUDIFY_DATA_DIR/cloudify-stage
          cp -a --verbose /opt/cloudify-stage/conf/manager.json $CLOUDIFY_DATA_DIR/cloudify-stage
        fi

        echo "Copy necessary directories to Persistent Volume"
        cp -a --verbose /opt/manager/resources $CLOUDIFY_DATA_DIR/manager
        cp -a --verbose /opt/mgmtworker/env/plugins $CLOUDIFY_DATA_DIR/mgmtworker
        if [ -d "/opt/cloudify-stage" ]; then
          cp -a --verbose /opt/cloudify-stage/dist/userData $CLOUDIFY_DATA_DIR/cloudify-stage
        fi
        
        touch "$CLOUDIFY_DATA_DIR/init-completed"

        echo "Removed unused directory"
        rm -rf --verbose /opt/manager/resources
        rm -rf --verbose /opt/mgmtworker/env/plugins
        if [ -d "/opt/cloudify-stage" ]; then
          rm -rf --verbose /opt/cloudify-stage/dist/userData
        fi

        echo "Removed unused files"
        rm -f --verbose /opt/mgmtworker/work/admin_token

        rm -f --verbose /opt/manager/rest-security.conf
        if [ -d "/opt/cloudify-composer" ]; then
          rm -f --verbose /opt/cloudify-composer/backend/conf/prod.json
          rm -f --verbose /opt/cloudify-composer/backend/conf/db_ca.crt
        fi
        if [ -d "/opt/cloudify-stage" ]; then
          rm -f --verbose /opt/cloudify-stage/conf/db_ca.crt
          rm -f --verbose /opt/cloudify-stage/conf/manager.json
        fi

        echo "Making symbolic links for directory"
        ln -s --verbose "$CLOUDIFY_DATA_DIR/manager/resources" /opt/manager/resources
        ln -s --verbose "$CLOUDIFY_DATA_DIR/mgmtworker/plugins" /opt/mgmtworker/env/plugins
        if [ -d "/opt/cloudify-stage" ]; then
          ln -s --verbose "$CLOUDIFY_DATA_DIR/cloudify-stage/userData" /opt/cloudify-stage/dist/userData
        fi

        echo "Making symbolic links for files"
        ln -s --verbose "$CLOUDIFY_DATA_DIR/mgmtworker/admin_token" /opt/mgmtworker/work/admin_token

        ln -s --verbose "$CLOUDIFY_DATA_DIR/manager/rest-security.conf" /opt/manager/rest-security.conf
        if [ -d "/opt/cloudify-composer" ]; then
          ln -s --verbose "$CLOUDIFY_DATA_DIR/cloudify-composer/prod.json" /opt/cloudify-composer/backend/conf/prod.json
          ln -s --verbose "$CLOUDIFY_DATA_DIR/cloudify-composer/db_ca.crt" /opt/cloudify-composer/backend/conf/db_ca.crt
        fi
        if [ -d "/opt/cloudify-composer" ]; then
          ln -s --verbose "$CLOUDIFY_DATA_DIR/cloudify-stage/db_ca.crt" /opt/cloudify-stage/conf/db_ca.crt
          ln -s --verbose "$CLOUDIFY_DATA_DIR/cloudify-stage/manager.json" /opt/cloudify-stage/conf/manager.json
        fi

        # Version-specific operations
        case ${WORKER_VERSION[0]} in
        7)
          # Config authorization.conf isn't necessary for CM>=7.x
          ;;
        *)
          cp -a --verbose /opt/manager/authorization.conf $CLOUDIFY_DATA_DIR/manager
          rm -f --verbose /opt/manager/authorization.conf
          ln -s --verbose "$CLOUDIFY_DATA_DIR/manager/authorization.conf" /opt/manager/authorization.conf
          ;;
        esac

        cfy_manager start
    fi
