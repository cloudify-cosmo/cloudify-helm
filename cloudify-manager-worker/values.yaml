nameOverride: "cloudify-manager-worker"
fullnameOverride: "cloudify-manager-worker"

# -- Parameters group for Docker images
# @default -- object
image:
  # -- Docker image repository
  repository: cloudifyplatform/premium-cloudify-manager-worker
  # -- Docker image tag
  tag: 6.4.0
  # -- Specify a imagePullPolicy, Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'. ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  pullPolicy: IfNotPresent
  # -- Optionally specify an array of imagePullSecrets. Secrets must be manually created in the namespace. ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  pullSecrets: []

# -- Parameters group for init containers
# @default -- object
initContainers:
  waitDependencies:
    # -- Enable wait-for-dependencies init container
    enabled: true
    # -- Docker image repository for wait-for-dependencies init container
    repository: busybox
    # -- Docker image tag for wait-for-dependencies init container
    tag: 1.34.1-uclibc
    # -- imagePullPolicy for wait-for-dependencies init container
    pullPolicy: IfNotPresent
    # -- timeout for waiting when all dependencies up
    timeout: 10m
    # -- resources requests and limits for wait-for-dependencies init container
    # @default -- object
    resources:
      # -- requests for wait-for-dependencies init container
      requests:
        memory: 50Mi
        cpu: 0.1
        # -- limits for wait-for-dependencies init container
      limits:
        memory: 50Mi
        cpu: 0.1

# -- Parameters group for connection to PostgreSQL database
# @default -- object
db:
  # -- When switched to true, it will take the FQDN for the pgsql database in host, and require CA cert in secret inputs under TLS section
  useExternalDB: false
  # -- Enable PostgreSQL client SSL certificate verification.
  postgresqlSslClientVerification: true
  # -- PostgreSQL connection host. If db.useExternalDB == true this value should contain FQDN, otherwise hostname without k8s domain.
  host: &postgresqlFullName "postgres-postgresql"
  # -- Database name for store Cloudify Manager data
  cloudifyDBName: "cloudify_db"
  # -- Username for DB connection
  cloudifyUsername: "cloudify"
  # -- Password for DB connection
  cloudifyPassword: "cloudify"
  # -- Database name for initial connection
  serverDBName: "postgres"
  # -- Username for initial DB connection
  serverUsername: &postgresqlUsername "postgres"
  # -- Password for initial DB connection
  serverPassword: &postgresqlPassword "cfy_test_pass"

# -- Parameters group for connection to RabbitMQ (Message Broker)
# @default -- object
queue:
  # -- RabbitMQ connection host (without k8s domain)
  host: &rabbitmqFullName "rabbitmq"
  # -- Username for connection to RabbitMQ
  username: &rabbitmqUsername "cfy_user"
  # -- Password for connection to RabbitMQ
  password: &rabbitmqPassword "cfy_test_pass"

# -- Parameters group for k8s service
# @default -- object
service:
  # -- k8s service host
  host: cloudify-manager-worker
  # -- k8s service type
  type: ClusterIP
  # -- k8s service name
  name: cloudify-manager-worker
  http:
    # -- k8s service http port
    port: 80
  https:
    # -- k8s service https port
    port: 443
  internalRest:
    # -- k8s service internal rest port
    port: 53333
  # -- k8s service additional ports. If you need to open additional ports for the manager, uncomment extraPorts and define your port parameters - More than one can be added (below is an example).
  extraPorts: {}
  # Example:
  # - name: examplePort
  #   port: 33221
  #   protocol: TCP
  #   targetPort: 33221

# -- Node labels for default backend pod assignment.
# Ref: https://kubernetes.io/docs/user-guide/node-selection/
nodeSelector: {}

## -- Parameters group for TLS/SSL configuration.
# @default -- object
tls:
  # -- k8s secret name with certificates to secure communications between cloudify manager and postgresql|rabbitmq deployed inside the same k8s cluster.
  secretName: &tlsSecretName "cfy-certs"
  # -- k8s secret name with ssl certificates for external PostgreSQL database. Required only for connection to external PostgreSQL database.
  pgsqlSslSecretName: pgsql-external-cert
  # -- subPath name for ssl CA cert in k8s secret. Required only for connection to external PostgreSQL database.
  pgsqlSslCaName: postgres_ca.crt
  # -- subPath name for ssl certificate in k8s secret for connection to external PostgreSQL database. Isn't required if db.postgresqlSslClientVerification = false.
  pgsqlSslCertName: ""
  # -- subPath name for ssl key in k8s secret for connection to external PostgreSQL database. Isn't required if db.postgresqlSslClientVerification = false.
  pgsqlSslKeyName: ""

# -- Parameters group for data storage volume
# For multiple replicas of cloudify manager use NFS like storage, storageClass: 'cm-efs' (AWS example), accessMode: 'ReadWriteMany'
# Single replica - EBS (AWS example), storageClass: 'gp2' (AWS example), accessMode: 'ReadWriteOnce'
# @default -- object
volume:
  # -- volume storage class
  storageClass: "gp2"
  # -- volume access mode
  accessMode: "ReadWriteOnce"
  # -- volume size
  size: "3Gi"

# -- Additional secrets to mount on the manager worker pod, make sure the 'name' is also the secret name in the cluster.
# uncomment secrets and define your mounts
# More than one secret can be added and more than one mount+sub Path can defined for each secret. (below is an example), .
# secrets need to be base64 encoded
additionalSecrets:
  {}
  # Example
  # - name: secretName
  #   mounts:
  #     - mountPath: /mnt/cloudify-data/ssl/secretName.crt
  #       subPath: secretName.crt
  #     - mountPath: /mnt/cloudify-data/ssl/secretName.key
  #       subPath: secretName.key

# -- Parameters group for resources requests and limits
# @default -- object
resources:
  # -- resources requests for Cloudify Manager container
  requests:
    memory: 2Gi
    cpu: 0.5
  # -- resources limits for Cloudify Manager container
  limits:
    memory: 4.5Gi
    cpu: 3

# -- Parameters group for Cloudify Manager configuration
# @default -- object
config:
  # -- Replicas count for launch.
  # Multiple replicas works only with NFS like volume.
  replicas: 1
  # -- Add labels to Manager-worker container (see example below).
  #   example-label: "cloudify-example"
  labels: {}
  # -- Delay before Cloudify Manager start, in seconds
  startDelay: 0
  # -- bash commands for execute after main startup script
  after_bash: ""
  # -- "manager.cli_local_profile_host_name" parameter from Cloudify Manager config.yaml file.
  cliLocalProfileHostName: localhost
  # -- "manager.public_ip" parameter from Cloudify Manager config.yaml file. If is not set, will be calculated automatically.
  public_ip:
  # -- "manager.private_ip" parameter from Cloudify Manager config.yaml file. If is not set, will be calculated automatically.
  private_ip:
  security:
    # -- Enable SSL for Cloudify Manager.
    sslEnabled: false
    # -- Initial admin password for Cloudify Manager.
    adminPassword: admin
  # -- Path to TLS certificate.
  tlsCertPath: /mnt/cloudify-data/ssl/tls.crt
  # -- Path to TLS certificate key.
  tlsKeyPath: /mnt/cloudify-data/ssl/tls.key
  # -- Path to CA certificate.
  caCertPath: /mnt/cloudify-data/ssl/ca.crt
  # -- Cloudify Manager worker count.
  # Suggested worker count for 1vcpu manager, add more if using a stronger host
  workerCount: 4
  # -- Maximum number of worker processes started by the management worker.
  mgmtWorkerCount: 8
  # Used to control specific Stage configurations
  userConfig:
    # -- Enable initial login password hint.
    loginHint: true
    # -- Maximum manager forwarded request size.
    maxBodySize: 2gb

# -- Parameters group for OKTA
# @default -- object
okta:
  # -- Enable OKTA support.
  enabled: false
  # -- k8s secret name containing the OKTA certificates.
  secretName: okta-license
  # -- SSL certificate path
  certPath: ""
  # -- SSO URL
  ssoUrl: ""
  # -- Portal URL
  portalUrl: ""

# -- Can contain "secretName" field with existing in k8s configMap name contains cloudify manager license file.
# license/licence conventions are accepted - make sure to allign the convention across the values file (This line and secret name) & in the configMap itself (See docs for more information)
license: {}
# license:
#   secretName: cfy-license

# -- Parameters group for pod liveness probe
# @default -- object
livenessProbe:
  # -- Enable liveness probe
  enabled: true
  httpGet:
    # -- liveness probe HTTP GET path
    path: /api/v3.1/ok
    # -- liveness probe HTTP port
    port: 80
  # -- liveness probe timeout in seconds
  timeoutSeconds: 15
  # -- liveness probe success threshold
  successThreshold: 1
  # -- liveness probe period in seconds
  periodSeconds: 30
  # -- liveness probe failure threshold
  failureThreshold: 8
  # -- liveness probe initial delay in seconds
  initialDelaySeconds: 600

# -- Parameters group for pod readiness probe
# @default -- object
readinessProbe:
  # -- Enable readiness probe
  enabled: true
  httpGet:
    # -- readiness probe HTTP GET path
    path: /console
    # -- readiness probe HTTP port
    port: 80
  # -- readiness probe timeout in seconds
  timeoutSeconds: 5
  # -- readiness probe success threshold
  successThreshold: 1
  # -- readiness probe period in seconds
  periodSeconds: 10
  # -- readiness probe failure threshold
  failureThreshold: 5
  # -- readiness probe initial delay in seconds
  initialDelaySeconds: 0

# -- Parameters group for pod startup probe
# @default -- object
startupProbe:
  # -- Enable startup probe
  enabled: true
  httpGet:
    # -- startup probe HTTP GET path
    path: /console
    # -- startup probe HTTP port
    port: 80
  # -- startup probe timeout in seconds
  timeoutSeconds: 5
  # -- startup probe success threshold
  successThreshold: 1
  # -- startup probe period in seconds
  periodSeconds: 10
  # -- startup probe failure threshold
  failureThreshold: 30
  # -- startup probe initial delay in seconds
  initialDelaySeconds: 30

# -- Parameters group for ingress (managed external access to service)
# @default -- object
ingress:
  # -- Enable ingress
  enabled: false
  # -- Hostname for ingress connection
  host: cfy-efs-app.eks.cloudify.co
  # -- Ingress annotation object. Please see an example in values.yaml file
  # @default -- object
  annotations:
    # Ingress class
    kubernetes.io/ingress.class: nginx
    # Ingress proxy body size. Use this annotation to allow upload of resources up to 50mb (e.g. plugins).
    nginx.ingress.kubernetes.io/proxy-body-size: 50m
    # cert-manager.io/cluster-issuer: "letsencrypt-prod"
  # -- Ingress TLS parameters
  # @default -- object
  tls:
    # -- Enabled TLS connections for Ingress
    enabled: false
    # -- k8s secret name with TLS certificates for ingress
    secretName: cfy-secret-name

# -- Parameters group for k8s pod security context
# @default -- object
podSecurityContext:
  runAsNonRoot: false
  seccompProfile:
    type: RuntimeDefault

# -- Parameters group for k8s containers security context
# @default -- object
containerSecurityContext:
  allowPrivilegeEscalation: false
  runAsNonRoot: false
  seccompProfile:
    type: RuntimeDefault
  capabilities:
    drop:
      - ALL
    add:
      - CHOWN
      - KILL
      - MKNOD
      - NET_BIND_SERVICE
      - DAC_OVERRIDE
      - DAC_READ_SEARCH
      - FOWNER
      - FSETID
      - SETUID
      - SETGID
      - SETFCAP
      - SETPCAP
      - AUDIT_WRITE

# -- Parameters greoup for bitnami/rabbitmq helm chart.
# Details: https://github.com/bitnami/charts/blob/main/bitnami/rabbitmq/README.md
# @default -- object
rabbitmq:
  deploy: true

  fullnameOverride: *rabbitmqFullName

  image:
    tag: 3.8.9-debian-10-r37

  auth:
    username: *rabbitmqUsername
    password: *rabbitmqPassword

    tls:
      enabled: true
      existingSecret: *tlsSecretName
      failIfNoPeerCert: false
      caCertificate: |-
      serverCertificate: |-
      serverKey: |-

  configuration: |-
    ## Username and password
    default_user = {{ .Values.auth.username }}
    default_pass = CHANGEME
    ## Clustering
    cluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s
    cluster_formation.k8s.host = kubernetes.default.svc.{{ .Values.clusterDomain }}
    cluster_formation.node_cleanup.interval = 10
    cluster_formation.node_cleanup.only_log_warning = true
    cluster_partition_handling = autoheal
    # queue master locator
    queue_master_locator = min-masters
    # enable guest user
    loopback_users.guest = false
    {{ tpl .Values.extraConfiguration . }}
    {{- if .Values.auth.tls.enabled }}
    ssl_options.verify = {{ .Values.auth.tls.sslOptionsVerify }}
    listeners.ssl.default = {{ .Values.service.tlsPort }}
    ssl_options.fail_if_no_peer_cert = {{ .Values.auth.tls.failIfNoPeerCert }}
    ssl_options.cacertfile = /opt/bitnami/rabbitmq/certs/ca_certificate.pem
    ssl_options.certfile = /opt/bitnami/rabbitmq/certs/server_certificate.pem
    ssl_options.keyfile = /opt/bitnami/rabbitmq/certs/server_key.pem
    {{- end }}
    {{- if .Values.ldap.enabled }}
    auth_backends.1 = rabbit_auth_backend_ldap
    auth_backends.2 = internal
    {{- range $index, $server := .Values.ldap.servers }}
    auth_ldap.servers.{{ add $index 1 }} = {{ $server }}
    {{- end }}
    auth_ldap.port = {{ .Values.ldap.port }}
    auth_ldap.user_dn_pattern = {{ .Values.ldap.user_dn_pattern  }}
    {{- if .Values.ldap.tls.enabled }}
    auth_ldap.use_ssl = true
    {{- end }}
    {{- end }}
    {{- if .Values.metrics.enabled }}
    ## Prometheus metrics
    prometheus.tcp.port = 9419
    {{- end }}
    {{- if .Values.memoryHighWatermark.enabled }}
    ## Memory Threshold
    total_memory_available_override_value = {{ include "rabbitmq.toBytes" .Values.resources.limits.memory }}
    vm_memory_high_watermark.{{ .Values.memoryHighWatermark.type }} = {{ .Values.memoryHighWatermark.value }}
    {{- end }}
    management.ssl.port       = 15671
    management.ssl.cacertfile = /opt/bitnami/rabbitmq/certs/ca_certificate.pem
    management.ssl.certfile   = /opt/bitnami/rabbitmq/certs/server_certificate.pem
    management.ssl.keyfile    = /opt/bitnami/rabbitmq/certs/server_key.pem

  resources:
    limits:
      memory: 512Mi
      cpu: 500m
    requests:
      memory: 256Mi
      cpu: 250m

  persistence:
    enabled: true

  service:
    extraPorts:
      - name: manager-ssl
        port: 15671
        targetPort: 15671

  metrics:
    serviceMonitor:
      honorLabels: true

  volumePermissions:
    enabled: true
    image:
      repository: bitnami/minideb
      tag: buster
      pullPolicy: Always
      resources:
        limits:
          cpu: 100m
          memory: 128Mi
        requests:
          cpu: 100m
          memory: 128Mi

# -- Parameters group for bitnami/postgresql helm chart.
# Details: https://github.com/bitnami/charts/blob/main/bitnami/postgresql/README.md
# @default -- object
postgresql:
  deploy: true

  fullnameOverride: *postgresqlFullName

  image:
    tag: 11.10.0-debian-10-r9

  postgresqlUsername: *postgresqlUsername
  postgresqlPassword: *postgresqlPassword

  resources:
    requests:
      memory: 256Mi
      cpu: 250m
    limits:
      memory: 512Mi
      cpu: 500m

  tls:
    enabled: true
    certificatesSecret: *tlsSecretName
    certFilename: "tls.crt"
    certKeyFilename: "tls.key"

  persistence:
    enabled: true

  volumePermissions:
    enabled: true
    image:
      repository: bitnami/minideb
      tag: buster
      pullPolicy: Always

  readReplicas:
    resources:
      requests:
        memory: 256Mi
        cpu: 250m
      limits:
        memory: 512Mi
        cpu: 500m

  metrics:
    image:
      tag: 0.8.0-debian-10-r278
