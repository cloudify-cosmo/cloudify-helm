nameOverride: "cloudify-manager-worker"
fullnameOverride: "cloudify-manager-worker"

image:
  repository: cloudifyplatform/premium-cloudify-manager-worker
  tag: 6.3.2
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: IfNotPresent
  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ##
  pullSecrets: []
  # - name: secretName
  initContainer:
    repository: busybox
    tag: latest
    pullPolicy: Always
    resources: {}

# external DB
db:
  useExternalDB: false # when switched to true, it will take the FQDN for the pgsql database in host, and require CA cert in secret inputs under TLS section
  postgresqlSslClientVerification: true
  host: postgres-postgresql
  cloudifyDBName: 'cloudify_db'
  cloudifyUsername: 'cloudify'
  cloudifyPassword: 'cloudify'
  serverDBName: 'postgres'
  serverUsername: 'postgres'
  serverPassword: 'cfy_test_pass'

# external Queue (Message Broker)
queue:
  host: rabbitmq
  username: 'cfy_user'
  password: 'cfy_test_pass'

service:
  host: cloudify-manager-worker
  type: ClusterIP
  name: cloudify-manager-worker
  http:
    port: 80
  https:
    port: 443
  internalRest:
    port: 53333
  ## If you need to open additional ports for the manager, uncomment extraPorts and define your port parameters - More than one can be added (below is an example)
  extraPorts: {}
  # - name: examplePort
  #   port: 33221
  #   protocol: TCP
  #   targetPort: 33221

## Node labels for default backend pod assignment
## Ref: https://kubernetes.io/docs/user-guide/node-selection/
##
nodeSelector: {}

##
## TLS configuration
##
tls:
  # certificates as a secret, to secure communications between cloudify manager and postgress|rabbitmq
  secretName: cfy-certs
  # Parameters for PostgreSQL SSL certificates, required for external postgresql database only
  pgsqlSslSecretName: pgsql-external-cert # k8s secret name with psql ssl certs
  pgsqlSslCaName: postgres_ca.crt # subPath name for ssl CA cert in k8s secret
  pgsqlSslCertName: '' # subPath name for ssl cert in k8s secret, isn't required
  pgsqlSslKeyName: '' # subPath name for ssl key in k8s secret, isn't required
  
# For multiple replicas of cloudify manager use NFS like storage, storageClass: 'aws-efs' (AWS example), accessMode: 'ReadWriteMany'
# Single replica - EBS (AWS example), storageClass: 'gp2' (AWS example), accessMode: 'ReadWriteOnce'
volume:
  storageClass: 'gp2'
  accessMode: 'ReadWriteOnce'
  size: "3Gi"

resources: {}
  # requests:
  #   memory: 0.5Gi
  #   cpu: 0.5
  # limits:
  #   memory: 0.5Gi
  #   cpu: 0.5

config:
  # Multiple replicas works only with NFS like volume
  replicas: 1
  labels: {}
#   Add labels to Manager-worker container (see example below)
#   example-label: "cloudify-example"
  startDelay: 0
  after_bash: ''
  cliLocalProfileHostName: localhost
  security:
    sslEnabled: false
    adminPassword: admin
  tlsCertPath: /mnt/cloudify-data/ssl/tls.crt
  tlsKeyPath: /mnt/cloudify-data/ssl/tls.key
  caCertPath: /mnt/cloudify-data/ssl/ca.crt
  workerCount: 4 # suggested worker count for 1vcpu manager, add more if using a stronger host
  mgmtWorkerCount: 8 # Maximum number of worker processes started by the management worker.
  userConfig:
    # used to control specific Stage configurations
    loginHint: true # true by default, change to false to remove the initial login password hint

okta:
  secretName: okta-license # if enabled, upload a secret containing the okta certificate.
  enabled: false
  certPath: ""
  ssoUrl: ""
  portalUrl: ""

license: {} # license/licence conventions are accepted - make sure to allign the convention across the values file (This line and secret name) & in the configMap itself (See docs for more information)
  # secretName: cfy-license

livenessProbe:
# Use this probe to configure liveness monitoring
  enabled: false
  httpGet:
    path: /api/v3.1/ok
    port: 80
  timeoutSeconds: 15
  successThreshold: 1
  periodSeconds: 30
  failureThreshold: 8
  initialDelaySeconds: 600
     
readinessProbe:
# Use this probe to configure readiness monitoring
  enabled: false
  httpGet:
    path: /console
    port: 80
  timeoutSeconds: 5
  successThreshold: 1
  periodSeconds: 10
  failureThreshold: 5
  initialDelaySeconds: 200

ingress:
  enabled: false
  host: cfy-efs-app.eks.cloudify.co
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-body-size: 50m # use this annotation to allow upload of resources up to 50mb (e.g. plugins)
    # cert-manager.io/cluster-issuer: "letsencrypt-prod"
  tls:
    enabled: false
    secretName: cfy-secret-name
