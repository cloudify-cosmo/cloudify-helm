replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations: {}

podSecurityContext: {}

securityContext: {}

service:
  type: ClusterIP
  port: 80
  http:
    port: 80

ingress:
  enabled: true
  host:
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-body-size: 50m
  tls:
    enabled: false
    secretName: cfy-secret-name

# These should be base64-encoded TLS certificates and keys
certs:
  ca_cert: ""
  ca_key: ""
  external_cert: ""
  external_key: ""
  internal_cert: ""
  internal_key: ""
  rabbitmq_cert: ""
  rabbitmq_key: ""

resources:
  packages:
    agents:
      manylinux-x86_64-agent.tar.gz: https://cloudify-release-eu.s3.amazonaws.com/cloudify/7.0.0/ga-release/manylinux-x86_64-agent_7.0.0-ga.tar.gz
      manylinux-aarch64-agent.tar.gz: https://cloudify-release-eu.s3.amazonaws.com/cloudify/7.0.0/ga-release/manylinux-aarch64-agent_7.0.0-ga.tar.gz
      cloudify-windows-agent.exe: https://cloudify-release-eu.s3.amazonaws.com/cloudify/7.0.0/ga-release/cloudify-windows-agent_7.0.0-ga.exe

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

composer_backend:
  replicas: 1
  # in development, it might be useful to use Kind, and load your locally-built docker
  # images there.
  # In that case, you can use something like:
  #     image: docker.io/library/composer_backend
  # and load the image to Kind by using:
  #     $ kind load docker-image composer_backend:latest
  # (see dev-cluster/local-images-values.yaml for an example of using local images
  # for development)
  image: 263721492972.dkr.ecr.eu-west-1.amazonaws.com/cloudify-manager-composer-backend:latest-x86_64
  imagePullPolicy: IfNotPresent
  port: 3000
  probes:
    liveness:
      enabled: false
      initialDelaySeconds: 20
      periodSeconds: 20
      timeoutSeconds: 10
      successThreshold: 1
      failureThreshold: 3


composer_frontend:
  replicas: 1
  image: 263721492972.dkr.ecr.eu-west-1.amazonaws.com/cloudify-manager-composer-frontend:latest-x86_64
  imagePullPolicy: IfNotPresent
  port: 8188
  probes:
    liveness:
      enabled: true
      initialDelaySeconds: 20
      periodSeconds: 20
      timeoutSeconds: 10
      successThreshold: 1
      failureThreshold: 3


execution_scheduler:
  replicas: 1
  image: 263721492972.dkr.ecr.eu-west-1.amazonaws.com/cloudify-manager-execution-scheduler:latest-x86_64
  imagePullPolicy: IfNotPresent

fileserver:
  install: yes
  access_key: admin  # e.g. username
  secret_key: admin123  # e.g. password
  replicas: 1
  image: docker.io/minio/minio
  client_image: docker.io/bitnami/minio-client
  imagePullPolicy: IfNotPresent
  api_port: 9000
  console_port: 9090
  probes:
    liveness:
      enabled: true
      initialDelaySeconds: 20
      periodSeconds: 20
      timeoutSeconds: 10
      successThreshold: 1
      failureThreshold: 3
    readiness:
      enabled: true
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 3

mgmtworker:
  replicas: 1
  image: 263721492972.dkr.ecr.eu-west-1.amazonaws.com/cloudify-manager-mgmtworker:latest-x86_64
  imagePullPolicy: IfNotPresent

nginx:
  replicas: 1
  image: docker.io/library/nginx
  imagePullPolicy: IfNotPresent
  http_port: 80
  https_port: 443
  internal_port: 53333
  probes:
    liveness:
      enabled: true
      initialDelaySeconds: 20
      periodSeconds: 20
      timeoutSeconds: 10
      successThreshold: 1
      failureThreshold: 3

postgresql:
  replicas: 1
  image: docker.io/library/postgres
  imagePullPolicy: IfNotPresent
  port: 5432
  postgres_db: cloudify_db
  postgres_password: cloudify
  postgres_user: cloudify
  probes:
    readiness:
      enabled: true
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 3

rabbitmq:
  replicas: 1
  image: 263721492972.dkr.ecr.eu-west-1.amazonaws.com/cloudify-manager-rabbitmq:latest-x86_64
  imagePullPolicy: IfNotPresent
  ssl_port: 5671
  management_port: 15671
  metrics_port: 15692
  probes:
    liveness:
      enabled: true
      initialDelaySeconds: 20
      periodSeconds: 30
      timeoutSeconds: 15
      successThreshold: 1
      failureThreshold: 3
    readiness:
      enabled: true
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 3

rest_service:
  replicas: 1
  image: 263721492972.dkr.ecr.eu-west-1.amazonaws.com/cloudify-manager-restservice:latest-x86_64
  imagePullPolicy: IfNotPresent
  port: 8100
  probes:
    liveness:
      enabled: false
      initialDelaySeconds: 20
      periodSeconds: 20
      timeoutSeconds: 10
      successThreshold: 1
      failureThreshold: 3

api_service:
  replicas: 1
  image: 263721492972.dkr.ecr.eu-west-1.amazonaws.com/cloudify-manager-apiservice:latest-x86_64
  imagePullPolicy: IfNotPresent
  port: 8101
  probes:
    liveness:
      enabled: true
      initialDelaySeconds: 20
      periodSeconds: 20
      timeoutSeconds: 10
      successThreshold: 1
      failureThreshold: 3

stage_backend:
  replicas: 1
  image: 263721492972.dkr.ecr.eu-west-1.amazonaws.com/cloudify-manager-stage-backend:latest-x86_64
  imagePullPolicy: IfNotPresent
  port: 8088
  probes:
    liveness:
      enabled: true
      initialDelaySeconds: 20
      periodSeconds: 20
      timeoutSeconds: 10
      successThreshold: 1
      failureThreshold: 3

stage_frontend:
  replicas: 1
  image: 263721492972.dkr.ecr.eu-west-1.amazonaws.com/cloudify-manager-stage-frontend:latest-x86_64
  imagePullPolicy: IfNotPresent
  port: 8188
  probes:
    liveness:
      enabled: true
      initialDelaySeconds: 20
      periodSeconds: 20
      timeoutSeconds: 10
      successThreshold: 1
      failureThreshold: 3

prometheus:
  replicas: 1
  image: prom/prometheus
  imagePullPolicy: IfNotPresent
  api_port: 9090
