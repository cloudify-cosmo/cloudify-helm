apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: rest-service
  name: rest-service
spec:
  replicas: {{ .Values.rest_service.replicas }}
  selector:
    matchLabels:
      app: rest-service
  template:
    metadata:
      labels:
        app: rest-service
        cloudify-name: cloudify-restservice
    spec:
      initContainers:
        - name: rest-service-init
          image: {{ .Values.rest_service.image }}
          imagePullPolicy: {{ .Values.rest_service.imagePullPolicy }}
          command:
            - /usr/bin/env
            - -S
            - bash
            - -exuc
            - |
              /opt/rest-service/docker/prepare_secrets.sh
              python -m manager_rest.configure_manager --db-wait $POSTGRES_HOST

              cd /opt/rest-service/migrations
              alembic upgrade head

              # setup config overrides based on the cluster state/values:
              # - if using the builtin seaweedfs, set s3_server_url to its fully-qualified address
              echo '{}'> /tmp/config-overrides.yaml
              {{- if .Values.seaweedfs.enabled }}
              cat >/tmp/config-overrides.yaml <<EOF
              manager:
                s3_server_url: "{{ include "cloudify-services.s3_server_url" . }}"
              EOF
              {{- end }}

              python -m manager_rest.configure_manager -c "{{ .Values.rest_service.configPath }}" -c "/tmp/config-overrides.yaml"
          env:
            {{- include "cloudify-services.postgres_env_vars" . | nindent 12 }}
            {{- include "cloudify-services.restservice_keys" . | nindent 12 }}
          volumeMounts:
            - mountPath: /etc/cloudify/ssl
              name: ssl
              readOnly: true
            - name: config
              mountPath: {{ .Values.rest_service.configPath }}
              subPath: config.yaml
              readOnly: true
        {{ if .Values.seaweedfs.enabled }}
        - name: seaweedfs-create-resources-bucket
          image: {{ .Values.seaweedfs.clientImage }}
          imagePullPolicy: {{ .Values.rest_service.imagePullPolicy }}
          command: ['sh', '-c', "aws s3 ls s3://resources || aws s3 mb s3://resources"]
          env:
            - name: AWS_ENDPOINT_URL
              value: {{ include "cloudify-services.s3_server_url" . }}
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.rest_service.s3.credentials_secret_name }}
                  key: admin_access_key_id
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.rest_service.s3.credentials_secret_name }}
                  key: admin_secret_access_key
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            fsGroup: 1000
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              drop:
                - ALL
          resources:
            requests:
              memory: 100Mi
              cpu: 0.1
            limits:
              memory: 100Mi
              cpu: 0.5
        {{ if ((.Values.resources).packages).agents }}
        - name: local-agent-packages-fetch
          image: alpine/curl
          imagePullPolicy: {{ .Values.rest_service.imagePullPolicy }}
          args:
            - sh
            - -c
            - mkdir -p /tmp/packages/agents && {{ ( include "cloudify-services.curl-download" ( list "/tmp/packages/agents" .Values.resources.packages.agents ) ) }}
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            fsGroup: 1000
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              drop:
                - ALL
          volumeMounts:
            - mountPath: /tmp/packages
              name: packages
          resources:
            requests:
              memory: 100Mi
              cpu: 0.1
            limits:
              memory: 100Mi
              cpu: 0.2
        - name: seaweedfs-upload-agent-packages
          image: {{ .Values.seaweedfs.clientImage }}
          imagePullPolicy: {{ .Values.rest_service.imagePullPolicy }}
          args: [s3, cp, --recursive, --no-progress, /tmp/packages/, s3://resources/packages/]
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            fsGroup: 1000
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              drop:
                - ALL
          env:
            - name: AWS_ENDPOINT_URL
              value: {{ include "cloudify-services.s3_server_url" . }}
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.rest_service.s3.credentials_secret_name }}
                  key: admin_access_key_id
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.rest_service.s3.credentials_secret_name }}
                  key: admin_secret_access_key
          volumeMounts:
            - mountPath: /tmp/packages
              name: packages
          resources:
            requests:
              memory: 100Mi
              cpu: 0.1
            limits:
              memory: 100Mi
              cpu: 0.5
        {{ end }}
        {{ end }}
      containers:
        - name: rest-service
          image: {{ .Values.rest_service.image }}
          imagePullPolicy: {{ .Values.rest_service.imagePullPolicy }}
          env:
            {{- include "cloudify-services.postgres_env_vars" . | nindent 12 }}
            {{- include "cloudify-services.restservice_keys" . | nindent 12 }}
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.rest_service.s3.credentials_secret_name }}
                  key: admin_access_key_id
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.rest_service.s3.credentials_secret_name }}
                  key: admin_secret_access_key
            {{- if .Values.rest_service.s3.session_token_secret_name }}
            - name: AWS_SESSION_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.rest_service.s3.session_token_secret_name }}
                  key: session_token
            {{- end }}
            - name: RUNTIME_ENVIRONMENT
              value: "k8s"
            - name: BIND_HOST
              value: "[::]"
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              drop:
                - ALL
          ports:
            - containerPort: {{ .Values.rest_service.port }}
          {{- if .Values.rest_service.probes.liveness.enabled }}
          livenessProbe:
            httpGet:
              port: {{ .Values.rest_service.port}}
              path: /api/v3.1/ok
            initialDelaySeconds: {{ .Values.rest_service.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.rest_service.probes.liveness.periodSeconds }}
            timeoutSeconds: {{ .Values.rest_service.probes.liveness.timeoutSeconds }}
            successThreshold: {{ .Values.rest_service.probes.liveness.successThreshold }}
            failureThreshold: {{ .Values.rest_service.probes.liveness.failureThreshold }}
          {{- end }}
      restartPolicy: Always
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.imagePullSecrets | indent 8 }}
      {{- end }}
      volumes:
        - name: ssl
          secret:
            secretName: {{ template "cloudify-services.name" . }}-certs
            optional: false
        - name: packages
          emptyDir:
            sizeLimit: 500Mi
        - name: config
          configMap:
            name: rest-service-config
---
apiVersion: v1
kind: Service
metadata:
  name: rest-service
spec:
  ports:
    - port: {{ .Values.rest_service.port }}
  selector:
    app: rest-service
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: rest-service-config
data:
  config.yaml: |
    {{ tpl (.Values.rest_service.config | toYaml | nindent 4) . }}
